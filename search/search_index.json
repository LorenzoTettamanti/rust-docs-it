{"config":{"lang":["it"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Benvenuto nella Documentazione Rust in Italiano","text":"<p>Progetto in sviluppo</p> <p>Questa \u00e8 una traduzione in corso della documentazione ufficiale di Rust. Alcune sezioni potrebbero non essere ancora disponibili. \ud83d\udcd6 Documentazione originale (EN)</p>"},{"location":"#cose-rust","title":"\ud83e\udd80 Cos'\u00e8 Rust?","text":"<p>Rust \u00e8 un linguaggio di programmazione che ti permette di essere pi\u00f9 produttivo e fiducioso nel tuo codice. Rust combina prestazioni di basso livello con ergonomia di alto livello, garantendo:</p> <ul> <li>Sicurezza della memoria senza garbage collector</li> <li>Concorrenza senza data races</li> <li>Astrazioni a costo zero - paga solo per ci\u00f2 che usi</li> <li>Affidabilit\u00e0 - errori rilevati a compile-time</li> </ul>"},{"location":"#documentazione-disponibile","title":"\ud83d\udcda Documentazione disponibile","text":""},{"location":"#the-rust-standard-library","title":"The Rust Standard Library","text":"<p>La libreria standard di Rust fornisce le funzionalit\u00e0 fondamentali per scrivere applicazioni Rust.</p> <ul> <li> <p> Tipi Primitivi</p> <p>Tipi numerici, booleani, caratteri e altre primitive del linguaggio</p> <p> Esplora</p> </li> <li> <p> Collections</p> <p>Vector, HashMap, HashSet e altre strutture dati</p> <p> Scopri di pi\u00f9</p> </li> <li> <p> I/O &amp; File System</p> <p>Lettura e scrittura di file, gestione dell'input/output</p> <p> Leggi</p> </li> <li> <p> Option &amp; Result</p> <p>Gestione di valori opzionali e degli errori</p> <p> Approfondisci</p> </li> </ul> <p>Vai alla Standard Library completa \u2192</p>"},{"location":"#the-rust-programming-language-book","title":"The Rust Programming Language Book","text":"<p>Una guida completa per imparare Rust, dalla configurazione iniziale fino ai concetti avanzati.</p> <p>The Book</p> <p>Conosciuto comunemente come \"The Book\", questo \u00e8 il punto di partenza ideale per chiunque voglia imparare Rust.</p> <p>Capitoli principali:</p> <ol> <li>Per Iniziare - Installazione e primo progetto</li> <li>Concetti Comuni - Variabili, tipi di dati, funzioni</li> <li>Ownership - Il sistema di propriet\u00e0 di Rust</li> <li>Struct, Enum e Pattern Matching - Tipi di dati personalizzati</li> <li>Gestione di Progetti - Moduli, crate e Cargo</li> </ol> <p>Inizia a leggere The Book \u2192</p>"},{"location":"#quick-start","title":"\ud83d\ude80 Quick Start","text":""},{"location":"#installa-rust","title":"Installa Rust","text":"<pre><code># Su Linux o macOS\ncurl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\n\n# Su Windows\n# Scarica rustup-init.exe da https://rustup.rs/\n</code></pre>"},{"location":"#il-tuo-primo-programma","title":"Il tuo primo programma","text":"<pre><code>fn main() {\n    println!(\"Ciao, mondo!\");\n}\n</code></pre> <pre><code># Compila ed esegui\nrustc main.rs\n./main\n</code></pre>"},{"location":"#crea-un-nuovo-progetto-con-cargo","title":"Crea un nuovo progetto con Cargo","text":"<pre><code>cargo new hello_rust\ncd hello_rust\ncargo run\n</code></pre>"},{"location":"#risorse-per-lapprendimento","title":"\ud83c\udfaf Risorse per l'apprendimento","text":""},{"location":"#per-principianti","title":"Per principianti","text":"<ul> <li>The Rust Book - Inizia da qui!</li> <li>Rust by Example - Impara attraverso esempi pratici (prossimamente)</li> <li>Rustlings - Esercizi interattivi</li> </ul>"},{"location":"#per-sviluppatori-esperti","title":"Per sviluppatori esperti","text":"<ul> <li>Standard Library - Riferimento API completo</li> <li>The Cargo Book - Gestione avanzata dei progetti</li> <li>Async Book - Programmazione asincrona</li> </ul>"},{"location":"#riferimenti","title":"Riferimenti","text":"<ul> <li>Glossario - Terminologia tecnica</li> <li>Rust Reference - Specifiche del linguaggio</li> <li>Rustonomicon - Unsafe Rust e dettagli interni</li> </ul>"},{"location":"#perche-rust","title":"\ud83d\udca1 Perch\u00e9 Rust?","text":""},{"location":"#prestazioni","title":"Prestazioni","text":"<p>Rust \u00e8 incredibilmente veloce ed efficiente in termini di memoria. Senza runtime o garbage collector, pu\u00f2 alimentare servizi critici per le prestazioni, girare su sistemi embedded e integrarsi facilmente con altri linguaggi.</p>"},{"location":"#affidabilita","title":"Affidabilit\u00e0","text":"<p>Il ricco sistema di tipi di Rust e il modello di ownership garantiscono sicurezza della memoria e sicurezza nei thread, permettendoti di eliminare molte classi di bug a compile-time.</p>"},{"location":"#produttivita","title":"Produttivit\u00e0","text":"<p>Rust ha un'ottima documentazione, un compilatore amichevole con messaggi di errore utili, e strumenti di prima classe: Cargo (gestore di pacchetti e build), Rustfmt (formattazione automatica), e Rust Language Server (autocompletamento e IDE).</p>"},{"location":"#contribuisci","title":"\ud83e\udd1d Contribuisci","text":"<p>Questa traduzione \u00e8 un progetto della community. Puoi contribuire in diversi modi:</p> <ul> <li>\ud83d\udcdd Traducendo nuove sezioni</li> <li>\ud83d\udd0d Revisionando traduzioni esistenti  </li> <li>\ud83d\udc1b Segnalando errori o imprecisioni</li> <li>\ud83d\udcad Discutendo scelte terminologiche</li> </ul> <p>Scopri come contribuire \u2192</p>"},{"location":"#altre-risorse","title":"\ud83d\udcd6 Altre risorse","text":""},{"location":"#community-italiana","title":"Community italiana","text":"<ul> <li>GitHub rust-ita</li> <li>Forum Rust Italia (link quando disponibile)</li> <li>Discord/Telegram (link quando disponibile)</li> </ul>"},{"location":"#community-internazionale","title":"Community internazionale","text":"<ul> <li>Official Rust Website</li> <li>Users Forum</li> <li>Discord Ufficiale</li> <li>Subreddit r/rust</li> </ul> <p>Suggerimento per principianti</p> <p>Se sei nuovo a Rust, inizia con The Rust Book. \u00c8 progettato per insegnarti Rust step-by-step, indipendentemente dal tuo background di programmazione.</p> <p>Hai domande?</p> <p>Se hai dubbi sulla traduzione o vuoi proporre miglioramenti, apri una issue su GitHub.</p> <p>Ultima revisione: Ottobre 2025 Versione Rust: 1.82+</p> <p>Documentazione originale \u00a9 The Rust Project Developers | Traduzione \u00a9 Rust Italia Community</p>"},{"location":"CONTRIBUTING/","title":"Guida al Contributo","text":"<p>Grazie per il tuo interesse nel contribuire alla traduzione italiana della documentazione di Rust! \ud83e\udd80</p>"},{"location":"CONTRIBUTING/#indice","title":"Indice","text":"<ol> <li>Come iniziare</li> <li>Processo di traduzione</li> <li>Linee guida stilistiche</li> <li>Workflow Git</li> <li>Revisione delle traduzioni</li> </ol>"},{"location":"CONTRIBUTING/#come-iniziare","title":"Come iniziare","text":""},{"location":"CONTRIBUTING/#prerequisiti","title":"Prerequisiti","text":"<ul> <li>Conoscenza di Rust (almeno livello intermedio)</li> <li>Buona padronanza dell'italiano scritto</li> <li>Familiarit\u00e0 con Git e GitHub</li> <li>(Opzionale) Esperienza con MkDocs</li> </ul>"},{"location":"CONTRIBUTING/#setup-locale","title":"Setup locale","text":"<pre><code># Clona il repository\ngit clone https://github.com/rust-ita/rust-docs-it.git\ncd rust-docs-it\n\n# Crea un ambiente virtuale Python\npython -m venv venv\nsource venv/bin/activate  # Su Windows: venv\\Scripts\\activate\n\n# Installa le dipendenze\npip install -r requirements.txt\n\n# Avvia il server locale\nmkdocs serve\n</code></pre> <p>Ora puoi visitare <code>http://127.0.0.1:8000</code> per vedere la documentazione in locale.</p>"},{"location":"CONTRIBUTING/#processo-di-traduzione","title":"Processo di traduzione","text":""},{"location":"CONTRIBUTING/#1-scegli-una-sezione-da-tradurre","title":"1. Scegli una sezione da tradurre","text":"<ul> <li>Controlla le issue aperte con label <code>traduzione</code></li> <li>Cerca sezioni non ancora assegnate</li> <li>Commenta l'issue per farti assegnare la sezione</li> </ul>"},{"location":"CONTRIBUTING/#2-crea-una-issue-se-non-esiste","title":"2. Crea una issue (se non esiste)","text":"<p>Se vuoi tradurre una sezione non ancora tracciata:</p> <pre><code>**Titolo**: Traduzione: [Nome sezione]\n\n**Descrizione**:\n- Link alla documentazione originale: [URL]\n- Stima pagine/parole: ~X pagine\n- Priorit\u00e0: Alta/Media/Bassa\n\nMi piacerebbe occuparmi di questa traduzione.\n</code></pre>"},{"location":"CONTRIBUTING/#3-traduci-la-sezione","title":"3. Traduci la sezione","text":"<ul> <li>Usa il TEMPLATE.md come base</li> <li>Consulta il GLOSSARY.md per la terminologia</li> <li>Mantieni la struttura della documentazione originale</li> <li>Gli esempi di codice restano in inglese</li> </ul>"},{"location":"CONTRIBUTING/#4-verifica-la-traduzione","title":"4. Verifica la traduzione","text":"<p>Prima di aprire una PR, controlla:</p> <ul> <li>[ ] Terminologia coerente con il glossario</li> <li>[ ] Link funzionanti</li> <li>[ ] Formattazione markdown corretta</li> <li>[ ] Codice di esempio testato (se modificato)</li> <li>[ ] Nessun errore di battitura</li> <li>[ ] Preview locale con <code>mkdocs serve</code></li> </ul>"},{"location":"CONTRIBUTING/#linee-guida-stilistiche","title":"Linee guida stilistiche","text":""},{"location":"CONTRIBUTING/#tono-e-registro","title":"Tono e registro","text":"<ul> <li>Registro informale-professionale: usa il \"tu\" diretto</li> <li>Tono amichevole ma tecnico: la documentazione deve essere accessibile ma precisa</li> <li>Esempi: \"Puoi usare...\" invece di \"Si pu\u00f2 usare...\"</li> </ul>"},{"location":"CONTRIBUTING/#formattazione","title":"Formattazione","text":""},{"location":"CONTRIBUTING/#enfasi","title":"Enfasi","text":"<pre><code>- **Grassetto** per termini tecnici importanti alla prima occorrenza\n- *Corsivo* per enfasi leggera\n- `Codice inline` per keyword, tipi, nomi di funzioni\n</code></pre>"},{"location":"CONTRIBUTING/#blocchi-di-codice","title":"Blocchi di codice","text":"<pre><code>\\`\\`\\`rust\n// Commenti in inglese per coerenza\nfn example() {\n    println!(\"Codice in inglese\");\n}\n\\`\\`\\`\n</code></pre>"},{"location":"CONTRIBUTING/#note-e-avvisi","title":"Note e avvisi","text":"<p>Usa gli admonition di MkDocs:</p> <pre><code>!!! note \"Nota\"\n    Informazioni aggiuntive\n\n!!! tip \"Suggerimento\"\n    Consigli pratici\n\n!!! warning \"Attenzione\"\n    Avvertimenti importanti\n\n!!! danger \"Pericolo\"\n    Operazioni rischiose (unsafe, comportamenti indefiniti)\n\n!!! info \"Info\"\n    Riferimenti e link utili\n</code></pre>"},{"location":"CONTRIBUTING/#traduzione-vs-adattamento","title":"Traduzione vs Adattamento","text":""},{"location":"CONTRIBUTING/#cosa-tradurre","title":"Cosa tradurre","text":"<ul> <li>Testo esplicativo</li> <li>Intestazioni e titoli</li> <li>Commenti nella documentazione</li> <li>Messaggi d'errore (nei testi esplicativi)</li> </ul>"},{"location":"CONTRIBUTING/#cosa-non-tradurre","title":"Cosa NON tradurre","text":"<ul> <li>Codice Rust (keyword, identificatori, commenti negli esempi)</li> <li>Nomi di tipi standard (<code>String</code>, <code>Vec</code>, <code>Option</code>, etc.)</li> <li>Nomi di trait (<code>Debug</code>, <code>Clone</code>, <code>Iterator</code>, etc.)</li> <li>URL e link</li> <li>Termini tecnici consolidati (vedi glossario)</li> </ul>"},{"location":"CONTRIBUTING/#esempi-pratici","title":"Esempi pratici","text":"<p>\u274c Non fare cos\u00ec:</p> <pre><code>Il Vec \u00e8 una collezione dinamica.\n</code></pre> <p>\u2705 Fai cos\u00ec:</p> <pre><code>Il **Vec** \u00e8 una collezione dinamica che pu\u00f2 crescere o ridursi durante l'esecuzione.\n</code></pre> <p>\u274c Non fare cos\u00ec:</p> <pre><code>Quando fai il borrow di una variabile...\n</code></pre> <p>\u2705 Fai cos\u00ec:</p> <pre><code>Quando prendi in prestito (borrow) una variabile...\n</code></pre>"},{"location":"CONTRIBUTING/#workflow-git","title":"Workflow Git","text":""},{"location":"CONTRIBUTING/#branching-strategy","title":"Branching strategy","text":"<pre><code># Crea un branch per la tua traduzione\ngit checkout -b traduzione/std-vec\n\n# Naming convention:\n# - traduzione/[sezione]  \u2192 per nuove traduzioni\n# - fix/[sezione]         \u2192 per correzioni\n# - aggiornamento/[sezione] \u2192 per aggiornamenti\n</code></pre>"},{"location":"CONTRIBUTING/#commit-messages","title":"Commit messages","text":"<p>Usa commit messages chiari in italiano:</p> <pre><code># \u2705 Buoni esempi\ngit commit -m \"Traduce sezione Vec della standard library\"\ngit commit -m \"Corregge terminologia in Option e Result\"\ngit commit -m \"Aggiorna esempi nella sezione borrowing\"\n\n# \u274c Esempi da evitare\ngit commit -m \"fix\"\ngit commit -m \"update\"\ngit commit -m \"wip\"\n</code></pre>"},{"location":"CONTRIBUTING/#pull-request","title":"Pull Request","text":""},{"location":"CONTRIBUTING/#template-pr","title":"Template PR","text":"<pre><code>## Descrizione\n\nTraduzione della sezione [nome] della documentazione Rust.\n\n## Checklist\n\n- [ ] Ho consultato il glossario per la terminologia\n- [ ] Ho testato la build locale con `mkdocs serve`\n- [ ] Ho verificato tutti i link\n- [ ] Ho seguito le linee guida stilistiche\n- [ ] Gli esempi di codice sono in inglese\n- [ ] Ho aggiunto il link alla documentazione originale\n\n## Link\n\n- Documentazione originale: [URL]\n- Issue correlata: #[numero]\n\n## Note\n\n[Eventuali note per i revisori]\n</code></pre>"},{"location":"CONTRIBUTING/#revisione-delle-traduzioni","title":"Revisione delle traduzioni","text":""},{"location":"CONTRIBUTING/#per-i-revisori","title":"Per i revisori","text":"<p>Quando revisioni una PR, controlla:</p> <ol> <li>Accuratezza tecnica</li> <li>La traduzione \u00e8 fedele all'originale?</li> <li> <p>I concetti tecnici sono corretti?</p> </li> <li> <p>Terminologia</p> </li> <li>Segue il glossario?</li> <li> <p>\u00c8 coerente con altre traduzioni?</p> </li> <li> <p>Leggibilit\u00e0</p> </li> <li>Il testo \u00e8 fluido in italiano?</li> <li> <p>\u00c8 comprensibile per il pubblico target?</p> </li> <li> <p>Formattazione</p> </li> <li>Markdown corretto?</li> <li>Link funzionanti?</li> <li>Preview senza errori?</li> </ol>"},{"location":"CONTRIBUTING/#come-lasciare-feedback","title":"Come lasciare feedback","text":"<ul> <li>Sii costruttivo e rispettoso</li> <li>Suggerisci alternative concrete</li> <li>Spiega il motivo delle tue osservazioni</li> <li>Approva quando soddisfatto</li> </ul> <pre><code># \u2705 Feedback costruttivo\n\"Qui suggerirei 'prendere in prestito' invece di 'borroware' \nper essere pi\u00f9 coerenti con il glossario. Vedi GLOSSARY.md.\"\n\n# \u274c Feedback poco utile\n\"Questo non va bene.\"\n</code></pre>"},{"location":"CONTRIBUTING/#priorita-di-traduzione","title":"Priorit\u00e0 di traduzione","text":"<p>Stiamo dando priorit\u00e0 alle sezioni pi\u00f9 utilizzate:</p>"},{"location":"CONTRIBUTING/#alta-priorita","title":"Alta priorit\u00e0 \ud83d\udd34","text":"<ul> <li>[ ] Standard Library - Tipi primitivi</li> <li>[ ] Standard Library - String e &amp;str</li> <li>[ ] Standard Library - Vec</li> <li>[ ] Standard Library - Option e Result</li> <li>[ ] Standard Library - HashMap</li> <li>[ ] The Rust Book - Capitoli 1-10</li> </ul>"},{"location":"CONTRIBUTING/#media-priorita","title":"Media priorit\u00e0 \ud83d\udfe1","text":"<ul> <li>[ ] Standard Library - Iterator</li> <li>[ ] Standard Library - Collections avanzate</li> <li>[ ] The Rust Book - Capitoli 11-20</li> <li>[ ] Error handling patterns</li> </ul>"},{"location":"CONTRIBUTING/#bassa-priorita","title":"Bassa priorit\u00e0 \ud83d\udfe2","text":"<ul> <li>[ ] Sezioni avanzate e specialistiche</li> <li>[ ] Unsafe Rust</li> <li>[ ] Macro avanzate</li> </ul>"},{"location":"CONTRIBUTING/#domande-frequenti","title":"Domande frequenti","text":""},{"location":"CONTRIBUTING/#posso-tradurre-piu-sezioni-contemporaneamente","title":"Posso tradurre pi\u00f9 sezioni contemporaneamente?","text":"<p>\u00c8 meglio concentrarsi su una sezione alla volta per mantenere alta la qualit\u00e0 e velocizzare le review.</p>"},{"location":"CONTRIBUTING/#quanto-tempo-dovrebbe-richiedere-una-traduzione","title":"Quanto tempo dovrebbe richiedere una traduzione?","text":"<p>Dipende dalla lunghezza, ma in media: - Pagina piccola: 1-2 ore - Pagina media: 3-5 ore - Pagina grande: 1-2 giorni</p>"},{"location":"CONTRIBUTING/#cosa-faccio-se-non-sono-sicuro-di-una-traduzione","title":"Cosa faccio se non sono sicuro di una traduzione?","text":"<ol> <li>Consulta il glossario</li> <li>Cerca nella documentazione gi\u00e0 tradotta</li> <li>Chiedi nel canale Discord/Telegram della community</li> <li>Apri una discussion su GitHub</li> </ol>"},{"location":"CONTRIBUTING/#posso-proporre-modifiche-al-glossario","title":"Posso proporre modifiche al glossario?","text":"<p>Assolutamente s\u00ec! Apri una issue con label <code>glossario</code> e discutiamone insieme.</p>"},{"location":"CONTRIBUTING/#risorse-utili","title":"Risorse utili","text":"<ul> <li>\ud83d\udcd6 Documentazione Rust originale</li> <li>\ud83d\udcdd Glossario termini</li> <li>\ud83c\udfa8 Material for MkDocs</li> <li>\ud83e\udd80 Rust Italia Community</li> </ul>"},{"location":"CONTRIBUTING/#contatti","title":"Contatti","text":"<ul> <li>GitHub Issues: per domande specifiche sul progetto</li> <li>Discussioni: per proposte e discussioni generali</li> </ul> <p>Grazie per il tuo contributo! \ud83d\ude80</p>"},{"location":"GLOSSARY/","title":"Glossario Terminologico","text":"<p>Questo glossario definisce le scelte di traduzione per i termini tecnici di Rust. L'obiettivo \u00e8 mantenere coerenza in tutta la documentazione.</p>"},{"location":"GLOSSARY/#principi-generali","title":"Principi generali","text":"<ol> <li>Termini consolidati: alcuni termini tecnici restano in inglese perch\u00e9 universalmente riconosciuti</li> <li>Chiarezza: privilegiamo la comprensibilit\u00e0 rispetto alla traduzione letterale</li> <li>Coerenza: una volta scelto un termine, lo usiamo consistentemente</li> </ol>"},{"location":"GLOSSARY/#termini-fondamentali","title":"Termini fondamentali","text":"Inglese Italiano Note Ownership Propriet\u00e0 Concetto fondamentale di Rust Borrowing Prestito Riferimento temporaneo a un valore Borrow checker Borrow checker Manteniamo il termine originale Lifetime Tempo di vita Durata di validit\u00e0 di un riferimento Move semantics Semantica di spostamento Reference Riferimento Mutable Mutabile Immutable Immutabile Variable Variabile Binding Binding / Legame Preferiamo \"binding\" Pattern matching Pattern matching Manteniamo il termine originale Trait Trait Manteniamo il termine originale Struct Struct Manteniamo il termine originale Enum Enum Manteniamo il termine originale Type Tipo Generic Generico Closure Closure Manteniamo il termine originale Iterator Iteratore Smart pointer Puntatore intelligente Slice Slice Manteniamo il termine originale String slice String slice Array Array Manteniamo il termine originale Vector Vector / Vec HashMap HashMap Manteniamo il nome del tipo Option Option Manteniamo il nome del tipo Result Result Manteniamo il nome del tipo Error handling Gestione degli errori Panic Panic Manteniamo il termine originale Unwrap Unwrap Manteniamo il termine originale Macro Macro Crate Crate Manteniamo il termine originale Module Modulo Package Package Cargo Cargo Nome dello strumento Thread Thread Concurrency Concorrenza Race condition Race condition Unsafe Unsafe Manteniamo la keyword Raw pointer Puntatore raw Dereferencing Dereferenziazione Method Metodo Function Funzione Associated function Funzione associata Implementation Implementazione"},{"location":"GLOSSARY/#costrutti-del-linguaggio","title":"Costrutti del linguaggio","text":"Inglese Italiano Note if let if let Keyword, non si traduce match match Keyword, non si traduce loop loop Keyword, non si traduce while while Keyword, non si traduce for for Keyword, non si traduce return return Keyword, non si traduce impl impl Keyword, non si traduce"},{"location":"GLOSSARY/#tipi-e-collezioni","title":"Tipi e collezioni","text":"Inglese Italiano Note String String Nome del tipo &amp;str &amp;str String slice type i32, u32, etc. i32, u32, etc. Tipi numerici bool bool Tipo booleano char char Tipo carattere Collection Collezione Tuple Tupla"},{"location":"GLOSSARY/#concetti-avanzati","title":"Concetti avanzati","text":"Inglese Italiano Contesto Zero-cost abstraction Astrazione a costo zero Memory safety Sicurezza della memoria Thread safety Sicurezza nei thread Compile-time Tempo di compilazione Runtime Tempo di esecuzione / Runtime Dipende dal contesto Heap Heap Manteniamo il termine Stack Stack Manteniamo il termine Ownership transfer Trasferimento di propriet\u00e0 Drop trait Trait Drop RAII RAII Acronimo, non si traduce"},{"location":"GLOSSARY/#come-contribuire-al-glossario","title":"Come contribuire al glossario","text":"<p>Se incontri un termine non presente in questo glossario:</p> <ol> <li>Apri una issue su GitHub per discuterne</li> <li>Proponi una traduzione motivandola</li> <li>Attendi feedback dalla community prima di usarla nella documentazione</li> </ol>"},{"location":"GLOSSARY/#riferimenti","title":"Riferimenti","text":"<ul> <li>Rust Glossary (EN)</li> <li>Discussioni nella community italiana di Rust</li> </ul>"},{"location":"TEMPLATE/","title":"[Titolo della sezione]","text":"<p>Riferimento originale</p> <p>Questa \u00e8 la traduzione della documentazione ufficiale di Rust. \ud83d\udcd6 Versione originale \ud83d\udd04 Ultimo aggiornamento: [Data] \ud83d\udcdd Versione Rust: 1.xx</p>"},{"location":"TEMPLATE/#introduzione","title":"Introduzione","text":"<p>[Testo introduttivo tradotto]</p>"},{"location":"TEMPLATE/#esempi","title":"Esempi","text":"<pre><code>// Gli esempi di codice rimangono in inglese\n// per mantenere coerenza con la community internazionale\nfn main() {\n    println!(\"Hello, world!\");\n}\n</code></pre> <p>Suggerimento</p> <p>[Note aggiuntive o chiarimenti specifici per il pubblico italiano]</p>"},{"location":"TEMPLATE/#vedi-anche","title":"Vedi anche","text":"<ul> <li>[Link ad altre sezioni tradotte]</li> <li>[Link alla documentazione ufficiale]</li> </ul> <p>Hai trovato errori o imprecisioni?</p> <p>Aiutaci a migliorare questa traduzione! Apri una issue o proponi una modifica.</p>"},{"location":"std/collections/vec/","title":"Vec&lt;T&gt;","text":"<p>Riferimento originale</p> <p>\ud83d\udcd6 Documentazione originale \ud83d\udd04 Ultimo aggiornamento: Ottobre 2025 \ud83d\udcdd Versione Rust: 1.82+</p> <p>Un array dinamico ridimensionabile, scritto come <code>Vec&lt;T&gt;</code> ma pronunciato \"vector\".</p>"},{"location":"std/collections/vec/#panoramica","title":"Panoramica","text":"<p>I vector permettono di memorizzare pi\u00f9 valori dello stesso tipo in una singola struttura dati, con gli elementi disposti uno dopo l'altro in memoria. I vector possono crescere o ridursi dinamicamente durante l'esecuzione del programma.</p> <pre><code>let mut v: Vec&lt;i32&gt; = Vec::new();\nv.push(1);\nv.push(2);\nv.push(3);\n\nassert_eq!(v.len(), 3);\nassert_eq!(v[0], 1);\n</code></pre>"},{"location":"std/collections/vec/#creazione-di-un-vec","title":"Creazione di un Vec","text":"<p>Ci sono diversi modi per creare un nuovo <code>Vec</code>:</p>"},{"location":"std/collections/vec/#usando-vecnew","title":"Usando Vec::new()","text":"<pre><code>let v: Vec&lt;i32&gt; = Vec::new();\n</code></pre> <p>Questo crea un vector vuoto. Nota che abbiamo fornito un'annotazione di tipo: poich\u00e9 non inseriamo alcun valore nel vector, Rust non sa che tipo di elementi intendiamo memorizzare.</p>"},{"location":"std/collections/vec/#usando-la-macro-vec","title":"Usando la macro vec!","text":"<pre><code>let v = vec![1, 2, 3];\n</code></pre> <p>La macro <code>vec!</code> \u00e8 un modo conveniente per creare un nuovo vector con alcuni valori iniziali. Rust pu\u00f2 inferire che vogliamo un <code>Vec&lt;i32&gt;</code> dai valori forniti.</p>"},{"location":"std/collections/vec/#con-capacita-predefinita","title":"Con capacit\u00e0 predefinita","text":"<pre><code>let mut v = Vec::with_capacity(10);\n</code></pre> <p>Questo crea un vector vuoto ma con spazio preallocato per 10 elementi. Questo pu\u00f2 migliorare le prestazioni se sai approssimativamente quanti elementi aggiungerai.</p>"},{"location":"std/collections/vec/#aggiornare-un-vec","title":"Aggiornare un Vec","text":"<p>Per aggiungere elementi a un vector, usiamo il metodo <code>push</code>:</p> <pre><code>let mut v = Vec::new();\n\nv.push(5);\nv.push(6);\nv.push(7);\nv.push(8);\n</code></pre> <p>Mutabilit\u00e0 richiesta</p> <p>Come con qualsiasi variabile, se vogliamo modificare il suo valore, dobbiamo renderlo mutabile usando la keyword <code>mut</code>.</p>"},{"location":"std/collections/vec/#leggere-elementi-di-un-vec","title":"Leggere elementi di un Vec","text":"<p>Ci sono due modi per fare riferimento a un valore memorizzato in un vector:</p>"},{"location":"std/collections/vec/#usando-lindicizzazione","title":"Usando l'indicizzazione","text":"<pre><code>let v = vec![1, 2, 3, 4, 5];\n\nlet terzo: &amp;i32 = &amp;v[2];\nprintln!(\"Il terzo elemento \u00e8 {}\", terzo);\n</code></pre>"},{"location":"std/collections/vec/#usando-il-metodo-get","title":"Usando il metodo get","text":"<pre><code>let v = vec![1, 2, 3, 4, 5];\n\nmatch v.get(2) {\n    Some(terzo) =&gt; println!(\"Il terzo elemento \u00e8 {}\", terzo),\n    None =&gt; println!(\"Non c'\u00e8 un terzo elemento.\"),\n}\n</code></pre> <p>Quale metodo scegliere?</p> <ul> <li>Indicizzazione (<code>&amp;v[i]</code>): pi\u00f9 concisa, ma causa panic se l'indice \u00e8 fuori range</li> <li>get (<code>v.get(i)</code>): restituisce un <code>Option&lt;&amp;T&gt;</code>, permettendoti di gestire elegantemente indici non validi</li> </ul>"},{"location":"std/collections/vec/#confronto-tra-i-metodi","title":"Confronto tra i metodi","text":"<pre><code>let v = vec![1, 2, 3, 4, 5];\n\n// Questo causer\u00e0 un panic!\n// let non_esiste = &amp;v[100];\n\n// Questo restituisce None\nlet non_esiste = v.get(100);\nassert_eq!(non_esiste, None);\n</code></pre>"},{"location":"std/collections/vec/#iterare-sui-valori","title":"Iterare sui valori","text":""},{"location":"std/collections/vec/#iterazione-immutabile","title":"Iterazione immutabile","text":"<pre><code>let v = vec![100, 32, 57];\nfor i in &amp;v {\n    println!(\"{}\", i);\n}\n</code></pre>"},{"location":"std/collections/vec/#iterazione-mutabile","title":"Iterazione mutabile","text":"<pre><code>let mut v = vec![100, 32, 57];\nfor i in &amp;mut v {\n    *i += 50;\n}\n</code></pre> <p>Operatore di dereferenziazione</p> <p>Per modificare il valore a cui il riferimento mutabile punta, dobbiamo usare l'operatore di dereferenziazione (<code>*</code>) prima di usare l'operatore <code>+=</code>.</p>"},{"location":"std/collections/vec/#vec-e-ownership","title":"Vec e Ownership","text":"<p>Le regole di ownership e borrowing si applicano ai vector:</p> <pre><code>let mut v = vec![1, 2, 3, 4, 5];\n\nlet primo = &amp;v[0];\n\n// Questo non compiler\u00e0!\n// v.push(6);\n\nprintln!(\"Il primo elemento \u00e8: {}\", primo);\n</code></pre> <p>Errore di compilazione</p> <p>Questo codice potrebbe sembrare corretto, ma Rust lo impedisce. Il motivo \u00e8 che aggiungere un nuovo elemento al vector potrebbe richiedere l'allocazione di nuova memoria e la copia dei vecchi elementi nella nuova locazione. In questo caso, il riferimento al primo elemento punterebbe a memoria deallocata.</p>"},{"location":"std/collections/vec/#usare-un-enum-per-memorizzare-tipi-multipli","title":"Usare un Enum per memorizzare tipi multipli","text":"<p>Un vector pu\u00f2 memorizzare solo valori dello stesso tipo. Tuttavia, le varianti di un enum sono definite sotto lo stesso tipo enum, quindi quando abbiamo bisogno di memorizzare elementi di un tipo diverso in un vector, possiamo definire e usare un enum:</p> <pre><code>enum CellaFoglio {\n    Int(i32),\n    Float(f64),\n    Text(String),\n}\n\nlet riga = vec![\n    CellaFoglio::Int(3),\n    CellaFoglio::Text(String::from(\"blu\")),\n    CellaFoglio::Float(10.12),\n];\n</code></pre> <p>Rust ha bisogno di sapere quali tipi saranno nel vector a compile-time in modo da sapere esattamente quanta memoria heap sar\u00e0 necessaria per memorizzare ogni elemento.</p> <p>Alternative agli Enum</p> <p>Se non conosci l'insieme esaustivo di tipi che il programma otterr\u00e0 a runtime, la tecnica enum non funzioner\u00e0. In questi casi, puoi usare un trait object, che tratteremo pi\u00f9 avanti.</p>"},{"location":"std/collections/vec/#capacita-e-riallocazione","title":"Capacit\u00e0 e Riallocazione","text":"<p>I vector mantengono traccia sia della loro lunghezza (numero di elementi) che della loro capacit\u00e0 (quantit\u00e0 di memoria allocata):</p> <pre><code>let mut v = Vec::with_capacity(10);\n\n// La lunghezza \u00e8 0, ma la capacit\u00e0 \u00e8 10\nassert_eq!(v.len(), 0);\nassert_eq!(v.capacity(), 10);\n\n// Aggiungi elementi\nfor i in 0..10 {\n    v.push(i);\n}\n\n// Lunghezza ora \u00e8 10, capacit\u00e0 ancora 10\nassert_eq!(v.len(), 10);\nassert_eq!(v.capacity(), 10);\n\n// Aggiungere un altro elemento richieder\u00e0 riallocazione\nv.push(11);\n\n// Capacit\u00e0 \u00e8 ora maggiore di 10\nassert!(v.capacity() &gt; 10);\n</code></pre>"},{"location":"std/collections/vec/#rimuovere-elementi","title":"Rimuovere elementi","text":""},{"location":"std/collections/vec/#pop","title":"pop","text":"<p>Rimuove l'ultimo elemento:</p> <pre><code>let mut v = vec![1, 2, 3];\nassert_eq!(v.pop(), Some(3));\nassert_eq!(v.pop(), Some(2));\n</code></pre>"},{"location":"std/collections/vec/#remove","title":"remove","text":"<p>Rimuove un elemento a un indice specifico:</p> <pre><code>let mut v = vec![1, 2, 3];\nassert_eq!(v.remove(1), 2);\nassert_eq!(v, vec![1, 3]);\n</code></pre> <p>Prestazioni di remove</p> <p><code>remove(i)</code> \u00e8 O(n) perch\u00e9 tutti gli elementi dopo l'indice devono essere spostati. Se l'ordine non \u00e8 importante, usa <code>swap_remove</code> che \u00e8 O(1).</p>"},{"location":"std/collections/vec/#clear","title":"clear","text":"<p>Rimuove tutti gli elementi:</p> <pre><code>let mut v = vec![1, 2, 3];\nv.clear();\nassert_eq!(v.len(), 0);\n</code></pre>"},{"location":"std/collections/vec/#metodi-comuni","title":"Metodi comuni","text":"Metodo Descrizione Esempio <code>len()</code> Restituisce il numero di elementi <code>v.len()</code> <code>is_empty()</code> Controlla se il vector \u00e8 vuoto <code>v.is_empty()</code> <code>push(val)</code> Aggiunge un elemento alla fine <code>v.push(5)</code> <code>pop()</code> Rimuove e restituisce l'ultimo elemento <code>v.pop()</code> <code>get(i)</code> Accesso sicuro all'indice <code>v.get(2)</code> <code>first()</code> Riferimento al primo elemento <code>v.first()</code> <code>last()</code> Riferimento all'ultimo elemento <code>v.last()</code> <code>sort()</code> Ordina il vector <code>v.sort()</code> <code>reverse()</code> Inverte l'ordine <code>v.reverse()</code> <code>contains(&amp;val)</code> Controlla se contiene un valore <code>v.contains(&amp;3)</code>"},{"location":"std/collections/vec/#quando-usare-vec","title":"Quando usare Vec","text":"<p>I Vec sono appropriati quando:</p> <ul> <li>Hai bisogno di una collezione ridimensionabile di elementi</li> <li>Gli elementi sono dello stesso tipo</li> <li>Vuoi accesso casuale veloce tramite indici</li> <li>L'ordine degli elementi \u00e8 importante</li> </ul>"},{"location":"std/collections/vec/#vedi-anche","title":"Vedi anche","text":"<ul> <li>HashMap - Per coppie chiave-valore</li> <li>HashSet - Per set di valori unici</li> <li>VecDeque - Per una coda double-ended</li> <li>Slices - Viste su sequenze contigue</li> </ul> <p>Hai trovato errori o imprecisioni?</p> <p>Aiutaci a migliorare questa traduzione! Apri una issue o proponi una modifica.</p>"}]}